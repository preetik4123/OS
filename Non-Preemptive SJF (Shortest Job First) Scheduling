#include <iostream>
using namespace std;

struct Process {
    int pid;   // Process ID
    int at;    // Arrival Time
    int bt;    // Burst Time
    int ct;    // Completion Time
    int tat;   // Turnaround Time
    int wt;    // Waiting Time
};

int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;

    Process pro[20];

    for (int i = 0; i < n; i++) {
        pro[i].pid = i + 1;
        cout << "Enter Arrival Time and Burst Time for Process P" << i + 1 << ": ";
        cin >> pro[i].at >> pro[i].bt;
    }

    // Sort by Arrival Time
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (pro[j].at > pro[j + 1].at) {
                Process temp = pro[j];
                pro[j] = pro[j + 1];
                pro[j + 1] = temp;
            }
        }
    }

    int time = 0, completed = 0;
    float totalTAT = 0, totalWT = 0;
    bool done[20] = {false};

    while (completed < n) {
        int idx = -1;
        int minBT = 9999;

        for (int i = 0; i < n; i++) {
            if (!done[i] && pro[i].at <= time && pro[i].bt < minBT) {
                minBT = pro[i].bt;
                idx = i;
            }
        }

        if (idx == -1) {
            time++;
            continue;
        }

        time += pro[idx].bt;
        pro[idx].ct = time;
        pro[idx].tat = pro[idx].ct - pro[idx].at;
        pro[idx].wt = pro[idx].tat - pro[idx].bt;

        totalTAT += pro[idx].tat;
        totalWT += pro[idx].wt;

        done[idx] = true;
        completed++;
    }

    cout << "\n--- Non-Preemptive SJF Scheduling ---\n";
    cout << "PID\tAT\tBT\tCT\tTAT\tWT\n";
    for (int i = 0; i < n; i++) {
        cout << "P" << pro[i].pid << "\t"
             << pro[i].at << "\t"
             << pro[i].bt << "\t"
             << pro[i].ct << "\t"
             << pro[i].tat << "\t"
             << pro[i].wt << "\n";
    }

    cout << "\nAverage Turnaround Time: " << totalTAT / n << endl;
    cout << "Average Waiting Time: " << totalWT / n << endl;

    return 0;
}
