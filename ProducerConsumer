#include <iostream>
#include <thread>
#include <queue>
#include <mutex>
#include <condition_variable>
#include <chrono>

using namespace std;

queue<int> buffer;            
const unsigned int MAX_SIZE = 5; 
mutex mtx;
condition_variable cv;

void producer(int id, int n) {
    for(int i = 1; i <= n; ++i) {
        unique_lock<mutex> lock(mtx);
        cv.wait(lock, [](){ return buffer.size() < MAX_SIZE; });

        buffer.push(i);
        cout << "Producer " << id << " produced: " << i << endl;

        cv.notify_all(); 
        this_thread::sleep_for(chrono::milliseconds(100));
    }
}

void consumer(int id, int n) {
    for(int i = 1; i <= n; ++i) {
        unique_lock<mutex> lock(mtx);
        cv.wait(lock, [](){ return !buffer.empty(); }); 

        int item = buffer.front();
        buffer.pop();
        cout << "Consumer " << id << " consumed: " << item << endl;

        cv.notify_all(); 
        this_thread::sleep_for(chrono::milliseconds(150));
    }
}

int main() {
    thread p1(producer, 1, 10);
    thread c1(consumer, 1, 10);

    p1.join();
    c1.join();

    return 0;
}
