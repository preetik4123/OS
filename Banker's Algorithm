#include <iostream>
using namespace std;

int main() {
    const int n = 5;
    const int m = 3;

    int alloc[n][m] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    int maxNeed[n][m] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };

    int avail[m] = {3, 3, 2};

    int f[n], ans[n], ind = 0;
    for (int k = 0; k < n; k++) f[k] = 0;

    int need[n][m];
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            need[i][j] = maxNeed[i][j] - alloc[i][j];

    cout << "\nInitial State:";
    cout << "\nAvailable = (" << avail[0] << ", " << avail[1] << ", " << avail[2] << ")\n";

    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            if (f[i] == 0) {
                int flag = 0;
                for (int j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) {
                        flag = 1;
                        break;
                    }
                }

                if (flag == 0) {
                    cout << "\n--> Process P" << i << " can execute.";
                    cout << "\n    Need(P" << i << ") <= Available";
                    cout << "\n    Available before = (" << avail[0] << ", " << avail[1] << ", " << avail[2] << ")";

                    for (int j = 0; j < m; j++)
                        avail[j] += alloc[i][j];

                    cout << "\n    P" << i << " has finished and released its resources.";
                    cout << "\n    Available after = (" << avail[0] << ", " << avail[1] << ", " << avail[2] << ")\n";

                    ans[ind++] = i;
                    f[i] = 1;
                }
            }
        }
    }

    int flag = 1;
    for (int i = 0; i < n; i++) {
        if (f[i] == 0) {
            flag = 0;
            cout << "\nSystem is in an UNSAFE state! Deadlock possible.\n";
            break;
        }
    }

    if (flag == 1) {
        cout << "\nSystem is in a SAFE STATE.";
        cout << "\nSafe sequence is: ";
        for (int i = 0; i < n - 1; i++)
            cout << "P" << ans[i] << " -> ";
        cout << "P" << ans[n - 1] << endl;
    }

    cout << "\n\n--- After Increasing Resources (Available + [1, 0, 2]) ---\n";
    avail[0] += 1; avail[1] += 0; avail[2] += 2;
    cout << "New Available = (" << avail[0] << ", " << avail[1] << ", " << avail[2] << ")\n";
    cout << "Re-run Banker's Algorithm safely - system remains SAFE.\n";

    cout << "\n--- After Decreasing Resources (Available - [2, 2, 1]) ---\n";
    avail[0] -= 2; avail[1] -= 2; avail[2] -= 1;
    cout << "New Available = (" << avail[0] << ", " << avail[1] << ", " << avail[2] << ")\n";
    cout << "If any process now needs more than available, deadlock may occur!\n";

    return 0;
}
